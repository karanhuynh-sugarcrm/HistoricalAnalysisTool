AllureDiff.prototype.statusDiff = function() {
    var len = this.allureReports.length-1;
    // try to make this asyncronous 
    /*for (var key in this.allureReports[0]) {
        console.log(key);
        console.log(this.allureReports[0][key]);
    }*/
    //console.log(this.allureReports[0]["PasswordManagement_19970"].status);
    for (var i = 0; i < len+1; i++) {
        if (this.allureReports[i]["Cases_23274"] !== undefined) {
            console.log(this.allureReports[i]["Cases_23274"].buildId);
            console.log(this.allureReports[i]["Cases_23274"].status);
        }
    }
    
    var differences = [];
    var current = len;
    var previous = len-1;
    for (var i = 0; i < len; i++) {
        for (var testName in this.allureReports[current]) {
            var s1 = this.allureReports[current][testName];
            if(this.allureReports[previous][testName] == undefined) {
                var prevCop = previous;
                while (this.allureReports[previous][testName] == undefined && prevCop > 0) {
                    prevCop--;
                }
                s2 = this.allureReports[prevCop][testName];
                if (prevCop > 0 && (s1.status !== s2.status)) {
                    console.log(testName);
                    console.log(s1.buildId);
                    console.log(s2.buildId);
                }
                //console.log(testName);
                //console.log(this.allureReports[previous][testName].buildId);
            }
            /*if (this.allureReports[previous][testName] !== undefined) {
                // Test status generated successfully so add to running total of number of test runs
                if (this.allureReports[previous][testName].status !== this.allureReports[current][testName].status) {
                    if (this.stabilityPercen[testName] == undefined) {
                        this.stabilityPercen[testName] = 0;
                    }
                    //console.log(testName);
                    //console.log(this.allureReports[previous][testName].status);
                    //console.log(this.allureReports[current][testName].status);
                    this.stabilityPercen[testName]++;
              
                }

            }*/

            
        }
        
        //this.findDifference(this.allureReports[previous],
          //                      this.allureReports[current], i);
            

        previous--;
        current--;
    }
    console.log(this.stabilityPercen["Cases_23854"]);
    for (var key in this.stabilityPercen) {
        var temp = this.stabilityPercen[key];
        //temp.stability = ((temp.numTestRuns-1) - temp.numStatusChanges) / (temp.numTestRuns-1);
        //console.log(key + " : " + temp);
        
    }

    //var r = differences[0];
    //console.log(r[0]);

    
    
    /*var ii = 0;
    for(var key in this.allureReports) {
        this.allureReports["Studio_24548"].sort(sortBuild);
        var len = this.allureReports["Studio_24548"].length-1;
        var first = 0;
        var second = 1;
        console.log(key + "length: " + len);
        for (var i = 0; i < len; i++) {
            if ((this.allureReports["Studio_24548"][first].buildId - this.allureReports["Studio_24548"][second].buildId) !== 1) {
                console.log(ii++);
            }
            console.log(this.allureReports["Studio_24548"][first].buildId + " / " + this.allureReports["Studio_24548"][first].status);
            console.log(this.allureReports["Studio_24548"][second].buildId + " / " + this.allureReports["Studio_24548"][second].status);
            first++;
            second++;
        }
        console.log(ii);
        break;
        
    }
    
    console.log(this.allureReports["Studio_24548"]);

    */
            
}

/**
 * Find the difference between the old and new Allure Reports
 * @public
 * @returns {Array} The results of differences
 */
AllureDiff.prototype.findDifference = function(previous, current, run) {
    // Generate the diff using deep diff library while filtering uri from the diff
    var totalDiffs = diff(previous, current, function(currentPath, key, side) {
        if(key === 'uri') {
            //console.log(key);
            return true;
        }
    });

    // If there are no differences, return an empty array
    if(totalDiffs === undefined) {
        return [];
    }

    // A representation of the different kinds of diffs generated by deep-diff
    var kinds = {
        edited: 'E',
        arrayChange: 'A',
        deleted: 'D',
        newlyAdded: 'N'
    };

    // Identify the difference types of changes and saving the data
    //console.log(totalDiffs.length);
    for(var i = 0, len = totalDiffs.length; i < len; i++) {
        var difference = totalDiffs[i];
        var testName = difference.path[0];
       
        // only care about status change
         if (this.stabilityPercen[testName] == undefined) {
                this.stabilityPercen[testName] = {
                    'numStatusChanges' : 0,
                    'numTestRuns' : 0,
                    'stability' : 0
                }
         }

        //FOR POTENTIAL USE OF NEW OR DELETED TEST STATUS IS RELEVANT
        switch(difference.kind) {
            case kinds.edited:
                // testCaseName includes _execute whereas testCase does not $#%@#$@
                if (difference.path.indexOf("status") >= 1) {
                    //console.log(testName);
                    //console.log(first[testName].status);
                    //console.log(second[testName].status);
                    //console.log(difference.lhs + difference.rhs);
                   
                    this.stabilityPercen[testName].numStatusChanges++;


                }
                break;
            case kinds.newlyAdded:
                this.stabilityPercen[testName].numTestRuns = run + 1;
                break;
            //case kinds.deleted:
                //console.log(testName);
                //console.log(previous[testName]);
                //console.log(run);
                
                
                //break;
        }
        
    }
};

/**
 * Given the results, iterate each test case and assign each of them
 * with a status depending on their old and new test statuses
 * @private
 */
function assignStatus(results) {
    var stateChangeMap = {
        PASSED: { BROKEN: 'SEVERE', FAILED: 'SEVERE', PENDING: 'WARNING'},
        BROKEN: { FAILED: 'WARNING', PASSED: 'FINE', PENDING: 'WARNING'},
        FAILED: { BROKEN: 'WARNING', PASSED: 'FINE', PENDING: 'WARNING'},
        PENDING: { BROKEN: 'WARNING', FAILED: 'WARNING', PASSED: 'FINE'}
    };

    for(var i = 0, len = results.length; i < len; i++) {
        var result = results[i];
        if(result.type === 'New' || result.type === 'Deleted') {
            result.status = 'INFO';
        } else if(result.type === 'Changed') {
            result.status = stateChangeMap[result.oldTest.status][result.newTest.status];
        }
    }
};

module.exports = AllureDiff;