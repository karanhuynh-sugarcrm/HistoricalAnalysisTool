/**
 * Generate difference between two representations of Allure Reports
 * @author Eric Tam
 */

var diff = require('deep-diff').diff;
var async = require('async');

/**
 * @constructor
 * @param {Object} A simplified old report generated by AllureParser 
 * @param {Object} A simplified new report generated by AllureParser 
 */
function AllureDiff(oldAllureReport, newAllureReport) {
    this.oldTests = oldAllureReport;
    this.newTests = newAllureReport;
}

function AllureDiff(allureReports) {

}

function sortBuild(a, b) {
    if (a.name > b.name) {
        return -1;
    } else if (a.name < b.name) {
        return 1;
    } else {
        return 0;
    }
}
AllureDiff.prototype.statusDiff = function(allureReports) {
    //console.log(allureReports);
    var results = {};
    var len = allureReports.length-1; 
    var stabilityPercen = [];
    var current = 0;
    var previous = 1;
    for (var i = 0; i < len; i++) {
        for (var testName in allureReports[current]) {
            if (allureReports[previous][testName] !== undefined) {
                // Test status generated successfully so add to running total of number of test runs
                if (allureReports[previous][testName].status !== allureReports[current][testName].status) {
                    if (results[testName] == undefined) {
                        results[testName] = {
                            name: testName,
                            stat: 0,
                            flop: 0,
                            arr: {},
                            total: 0,
                        };
                    }
                    //console.log(results[testName].flop);
                    //console.log(allureReports[previous][testName].status);
                    //allureReports[previous][testName].stabilityPercen++;
                    results[testName].flop++;
                    //console.log(results[testName].flop);
                }
            }
  
        }
        previous++;
        current++;
    }
    
    var floppyTests = Object.keys(results);
    
    //console.log(floppyTests.length);
    // Calculate test stability percentage
    // Get running total for number of executed test runs 
    // ex. Only has resuts for 5/20 test runs
    async.forEach(floppyTests, function (item, callback) {
        
        for (var i = 0; i < len+1; i++) {
            
            if (allureReports[i][item] !== undefined) {
                var b = allureReports[i][item].buildId;
                //console.log(allureReports[i][item].buildId);
                //console.log(allureReports[i][item].status);
                results[item].total++;
                results[item].arr[b] = {
                    status: allureReports[i][item].status,
                    link: allureReports[i][item].uri
                }
            } else {      
                var b = allureReports[i].buildId;
                results[item].arr[b] = "n/a";
            }
        }
        var stat = 100 * ((results[item].total-1) - results[item].flop) / (results[item].total-1);
        results[item].stat = parseInt(stat);

        callback();
    }, function(err) {
        
        //async.forEach(f, function (item, callback) {

          //  console.log(item + " : " + results["KnowledgeBase_29617"].arr[item]);
        //});
    });
    return results;

    //return stabilityPercen;
    //return allureReports;
    /*var ii = 0;
    for(var key in this.allureReports) {
        this.allureReports["Studio_24548"].sort(sortBuild);
        var len = this.allureReports["Studio_24548"].length-1;
        var first = 0;
        var second = 1;
        console.log(key + "length: " + len);
        for (var i = 0; i < len; i++) {
            if ((this.allureReports["Studio_24548"][first].buildId - this.allureReports["Studio_24548"][second].buildId) !== 1) {
                console.log(ii++);
            }
            console.log(this.allureReports["Studio_24548"][first].buildId + " / " + this.allureReports["Studio_24548"][first].status);
            console.log(this.allureReports["Studio_24548"][second].buildId + " / " + this.allureReports["Studio_24548"][second].status);
            first++;
            second++;
        }
        console.log(ii);
        break;
        
    }
    */
            
}
/**
 * Find the difference between the old and new Allure Reports
 * @public
 * @returns {Array} The results of differences
 */
AllureDiff.prototype.findDifference = function(previous, current, run) {
    // Generate the diff using deep diff library while filtering uri from the diff
    var totalDiffs = diff(previous, current, function(currentPath, key, side) {
        if(key === 'uri') {
            //console.log(key);
            return true;
        }
    });

    // If there are no differences, return an empty array
    if(totalDiffs === undefined) {
        return [];
    }

    // A representation of the different kinds of diffs generated by deep-diff
    var kinds = {
        edited: 'E',
        arrayChange: 'A',
        deleted: 'D',
        newlyAdded: 'N'
    };

    // Identify the difference types of changes and saving the data
    //console.log(totalDiffs.length);
    for(var i = 0, len = totalDiffs.length; i < len; i++) {
        var difference = totalDiffs[i];
        var testName = difference.path[0];
       
        // only care about status change
         if (this.stabilityPercen[testName] == undefined) {
                this.stabilityPercen[testName] = {
                    'numStatusChanges' : 0,
                    'numTestRuns' : 0,
                    'stability' : 0
                }
         }

        //FOR POTENTIAL USE OF NEW OR DELETED TEST STATUS IS RELEVANT
        switch(difference.kind) {
            case kinds.edited:
                // testCaseName includes _execute whereas testCase does not $#%@#$@
                if (difference.path.indexOf("status") >= 1) {
                    //console.log(testName);
                    //console.log(first[testName].status);
                    //console.log(second[testName].status);
                    //console.log(difference.lhs + difference.rhs);
                   
                    this.stabilityPercen[testName].numStatusChanges++;


                }
                break;
            case kinds.newlyAdded:
                this.stabilityPercen[testName].numTestRuns = run + 1;
                break;
            //case kinds.deleted:
                //console.log(testName);
                //console.log(previous[testName]);
                //console.log(run);
                
                
                //break;
        }
        
    }
};

/**
 * Given the results, iterate each test case and assign each of them
 * with a status depending on their old and new test statuses
 * @private
 */
function assignStatus(results) {
    var stateChangeMap = {
        PASSED: { BROKEN: 'SEVERE', FAILED: 'SEVERE', PENDING: 'WARNING'},
        BROKEN: { FAILED: 'WARNING', PASSED: 'FINE', PENDING: 'WARNING'},
        FAILED: { BROKEN: 'WARNING', PASSED: 'FINE', PENDING: 'WARNING'},
        PENDING: { BROKEN: 'WARNING', FAILED: 'WARNING', PASSED: 'FINE'}
    };

    for(var i = 0, len = results.length; i < len; i++) {
        var result = results[i];
        if(result.type === 'New' || result.type === 'Deleted') {
            result.status = 'INFO';
        } else if(result.type === 'Changed') {
            result.status = stateChangeMap[result.oldTest.status][result.newTest.status];
        }
    }
};

module.exports = AllureDiff;